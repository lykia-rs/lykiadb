#[name=single, run=plan]>

SELECT id FROM books b group by id;

---

- project [id as id]
  - aggregate [group_by=[id], aggregates=[]]
    - scan [books as b]

#[name=multiple, run=plan]>

SELECT release_year as yr FROM books b group by release_year, publisher_id;

---

- project [release_year as yr]
  - aggregate [group_by=[release_year, publisher_id], aggregates=[]]
    - scan [books as b]

#[name=with_1_aggregate, run=plan]>
SELECT publisher_id, release_year as yr, avg(rating) as avg_rating, avg(rating) as avg_rating_dup FROM books b group by release_year, publisher_id order by yr;

---
- order [(yr, Asc)]
  - project [publisher_id as publisher_id, release_year as yr, avg(rating) as avg_rating, avg(rating) as avg_rating_dup]
    - aggregate [group_by=[release_year, publisher_id], aggregates=[avg(rating)]]
      - scan [books as b]

#[name=with_2_aggregates, run=plan]>
SELECT publisher_id, release_year as yr, avg(rating) as avg_rating, avg(rating + 1) as avg_rating_plus FROM books b group by release_year, publisher_id order by yr;

---
- order [(yr, Asc)]
  - project [publisher_id as publisher_id, release_year as yr, avg(rating) as avg_rating, avg((rating Add Num(1.0))) as avg_rating_plus]
    - aggregate [group_by=[release_year, publisher_id], aggregates=[avg((rating Add Num(1.0))), avg(rating)]]
      - scan [books as b]


#[name=having, run=plan]>

SELECT publisher_id from books group by publisher_id having avg(rating) > 3.0;

---

- filter [(avg(rating) Greater Num(3.0))]
  - project [publisher_id as publisher_id]
    - aggregate [group_by=[publisher_id], aggregates=[avg(rating)]]
      - scan [books as books]


#[name=having_without_group_by, run=plan]>
SELECT avg(rating) from books having avg(rating) > 3.0;

---

- filter [(avg(rating) Greater Num(3.0))]
  - project [avg(rating) as avg(rating)]
    - aggregate [group_by=[], aggregates=[avg(rating)]]
      - scan [books as books]

#[name=having_with_regular_value, run=plan]>
SELECT avg(rating) from books having anything > 10;

---

- filter [(anything Greater Num(10.0))]
  - project [avg(rating) as avg(rating)]
    - aggregate [group_by=[], aggregates=[avg(rating)]]
      - scan [books as books]