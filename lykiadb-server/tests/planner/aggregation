#[name=single, run=plan]>

SELECT id FROM books b group by id;

---

- project [id as id]
  - aggregate [group_by=[id], aggregates=[]]
    - scan [books as b]

#[name=multiple, run=plan]>

SELECT release_year as yr FROM books b group by release_year, publisher_id;

---

- project [release_year as yr]
  - aggregate [group_by=[release_year, publisher_id], aggregates=[]]
    - scan [books as b]

#[name=incorrect_aggregate, run=plan]>
SELECT avg(1 + avg(id)) as average FROM books b;

---err

Plan(NestedAggregationNotAllowed(Span { start: 15, end: 22, line: 0, line_end: 0 }))

#[name=with_1_aggregate, run=plan]>
SELECT publisher_id, release_year as yr, avg(rating) as avg_rating, avg(rating) as avg_rating_dup FROM books b group by release_year, publisher_id order by yr;

---
- order [(yr, Asc)]
  - project [publisher_id as publisher_id, release_year as yr, avg(rating) as avg_rating, avg(rating) as avg_rating_dup]
    - aggregate [group_by=[release_year, publisher_id], aggregates=[avg(rating)]]
      - scan [books as b]

#[name=with_2_aggregates, run=plan]>
SELECT publisher_id, release_year as yr, avg(rating) as avg_rating, avg(rating + 1) as avg_rating_plus FROM books b group by release_year, publisher_id order by yr;

---
- order [(yr, Asc)]
  - project [publisher_id as publisher_id, release_year as yr, avg(rating) as avg_rating, avg((rating Add Num(1.0))) as avg_rating_plus]
    - aggregate [group_by=[release_year, publisher_id], aggregates=[avg((rating Add Num(1.0))), avg(rating)]]
      - scan [books as b]


#[name=having, run=plan]>

SELECT publisher_id from books group by publisher_id having avg(rating) > 3.0;

---

- filter [(avg(rating) Greater Num(3.0))]
  - project [publisher_id as publisher_id]
    - aggregate [group_by=[publisher_id], aggregates=[avg(rating)]]
      - scan [books as books]

